// Generated by gencpp from file second_coursework/MoveRobotResponse.msg
// DO NOT EDIT!


#ifndef SECOND_COURSEWORK_MESSAGE_MOVEROBOTRESPONSE_H
#define SECOND_COURSEWORK_MESSAGE_MOVEROBOTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace second_coursework
{
template <class ContainerAllocator>
struct MoveRobotResponse_
{
  typedef MoveRobotResponse_<ContainerAllocator> Type;

  MoveRobotResponse_()
    : has_reached(false)  {
    }
  MoveRobotResponse_(const ContainerAllocator& _alloc)
    : has_reached(false)  {
  (void)_alloc;
    }



   typedef uint8_t _has_reached_type;
  _has_reached_type has_reached;





  typedef boost::shared_ptr< ::second_coursework::MoveRobotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::second_coursework::MoveRobotResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRobotResponse_

typedef ::second_coursework::MoveRobotResponse_<std::allocator<void> > MoveRobotResponse;

typedef boost::shared_ptr< ::second_coursework::MoveRobotResponse > MoveRobotResponsePtr;
typedef boost::shared_ptr< ::second_coursework::MoveRobotResponse const> MoveRobotResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::second_coursework::MoveRobotResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::second_coursework::MoveRobotResponse_<ContainerAllocator1> & lhs, const ::second_coursework::MoveRobotResponse_<ContainerAllocator2> & rhs)
{
  return lhs.has_reached == rhs.has_reached;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::second_coursework::MoveRobotResponse_<ContainerAllocator1> & lhs, const ::second_coursework::MoveRobotResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace second_coursework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::second_coursework::MoveRobotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::MoveRobotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::MoveRobotResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f5b0660d01731c203012c6957666172";
  }

  static const char* value(const ::second_coursework::MoveRobotResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f5b0660d01731c2ULL;
  static const uint64_t static_value2 = 0x03012c6957666172ULL;
};

template<class ContainerAllocator>
struct DataType< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "second_coursework/MoveRobotResponse";
  }

  static const char* value(const ::second_coursework::MoveRobotResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool has_reached\n"
;
  }

  static const char* value(const ::second_coursework::MoveRobotResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.has_reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRobotResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::second_coursework::MoveRobotResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::second_coursework::MoveRobotResponse_<ContainerAllocator>& v)
  {
    s << indent << "has_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECOND_COURSEWORK_MESSAGE_MOVEROBOTRESPONSE_H
